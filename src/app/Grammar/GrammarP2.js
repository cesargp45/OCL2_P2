/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GrammarP2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,16],$V2=[1,17],$V3=[1,32],$V4=[1,39],$V5=[1,33],$V6=[1,25],$V7=[1,34],$V8=[1,46],$V9=[1,22],$Va=[1,23],$Vb=[1,49],$Vc=[1,31],$Vd=[1,26],$Ve=[1,27],$Vf=[1,28],$Vg=[1,30],$Vh=[1,29],$Vi=[1,36],$Vj=[1,37],$Vk=[1,40],$Vl=[1,41],$Vm=[1,42],$Vn=[1,43],$Vo=[1,44],$Vp=[1,45],$Vq=[1,48],$Vr=[2,4,8,19,20,25,26,29,31,34,43,45,47,49,55,57,59,60,61,64,65,66,70,71,86,87,88,89,90,91,98],$Vs=[69,70,72,73,74,75,76,77,78,79,80,81,82,83,84],$Vt=[2,119],$Vu=[2,103],$Vv=[2,118],$Vw=[1,68],$Vx=[1,65],$Vy=[1,66],$Vz=[1,67],$VA=[1,70],$VB=[1,71],$VC=[1,72],$VD=[1,73],$VE=[1,74],$VF=[1,86],$VG=[1,89],$VH=[1,91],$VI=[1,90],$VJ=[1,92],$VK=[1,93],$VL=[1,94],$VM=[1,95],$VN=[1,96],$VO=[1,97],$VP=[1,98],$VQ=[1,99],$VR=[1,100],$VS=[1,101],$VT=[1,102],$VU=[1,103],$VV=[7,28,33,36,50,67,68,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84],$VW=[2,43],$VX=[1,111],$VY=[2,50],$VZ=[1,113],$V_=[7,28],$V$=[2,4,8,19,20,25,26,29,31,34,43,45,47,49,55,57,58,59,60,61,64,65,66,70,71,86,87,88,89,90,91,98],$V01=[1,158],$V11=[28,33,50],$V21=[1,161],$V31=[1,162],$V41=[1,163],$V51=[1,164],$V61=[1,165],$V71=[1,184],$V81=[1,193],$V91=[7,28,33,36,50,67,68,69,70,72,77,78,79,80,81,82,83,84],$Va1=[7,28,33,36,50,67,68,69,70,72,73,74,77,78,79,80,81,82,83,84],$Vb1=[7,28,33,36,50,67,68,69,77,78,79,80,81,82,83,84],$Vc1=[7,28,33,36,50,67,68,69,81,82,83,84],$Vd1=[7,67,68],$Ve1=[2,46],$Vf1=[1,198],$Vg1=[1,200],$Vh1=[7,28,33,46,49,55,67,68],$Vi1=[2,49],$Vj1=[1,201],$Vk1=[46,49],$Vl1=[2,60],$Vm1=[28,33],$Vn1=[7,28,33,36,49,50,67,68,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84],$Vo1=[1,227],$Vp1=[1,244],$Vq1=[1,245],$Vr1=[7,46,49],$Vs1=[1,257],$Vt1=[8,64,65];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"EOF":4,"Instructions":5,"Instruction":6,";":7,"}":8,"Declaration":9,"DeclarationArrayst":10,"Asignation":11,"IfSt":12,"WhileSt":13,"doWhileSt":14,"ForSt":15,"SwitchSt":16,"Statement":17,"PrintSt":18,"BREAK":19,"CONTINUE":20,"ReturnSt":21,"FunctionSt":22,"Call":23,"TernarioSt":24,"PRINT":25,"(":26,"ListaExpr":27,")":28,"RETURN":29,"Expr":30,"ID":31,"ParamsExpression":32,",":33,"FUNCTION":34,"Params":35,":":36,"Type":37,"ParamList":38,"Param":39,"NUMBER":40,"BOOLEAN":41,"STRING":42,"NULL":43,"VOID":44,"LET":45,"=":46,"CONST":47,"ListaLlaves":48,"[":49,"]":50,"ListaIndices":51,"IdAssign":52,"++":53,"--":54,"{":55,"StatementSw":56,"IF":57,"ELSE":58,"WHILE":59,"DO":60,"SWITCH":61,"CaseSt":62,"CaseEvalSt":63,"CASE":64,"DEFAULT":65,"FOR":66,"IN":67,"OF":68,"?":69,"-":70,"!":71,"+":72,"*":73,"/":74,"%":75,"**":76,"<":77,"<=":78,">":79,">=":80,"==":81,"!=":82,"&&":83,"||":84,"F":85,"DECIMAL":86,"ENTERO":87,"CADENA":88,"CADENAB":89,"TRUE":90,"FALSE":91,"LENGTH":92,"CHARAT":93,"CONCAT":94,"LOWER":95,"UPPER":96,"ArrayAcces":97,"NEW":98,"ARRAY":99,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",7:";",8:"}",19:"BREAK",20:"CONTINUE",25:"PRINT",26:"(",28:")",29:"RETURN",31:"ID",33:",",34:"FUNCTION",36:":",40:"NUMBER",41:"BOOLEAN",42:"STRING",43:"NULL",44:"VOID",45:"LET",46:"=",47:"CONST",49:"[",50:"]",53:"++",54:"--",55:"{",57:"IF",58:"ELSE",59:"WHILE",60:"DO",61:"SWITCH",64:"CASE",65:"DEFAULT",66:"FOR",67:"IN",68:"OF",69:"?",70:"-",71:"!",72:"+",73:"*",74:"/",75:"%",76:"**",77:"<",78:"<=",79:">",80:">=",81:"==",82:"!=",83:"&&",84:"||",86:"DECIMAL",87:"ENTERO",88:"CADENA",89:"CADENAB",90:"TRUE",91:"FALSE",92:"LENGTH",93:"CHARAT",94:"CONCAT",95:"LOWER",96:"UPPER",98:"NEW",99:"ARRAY"},
productions_: [0,[3,1],[3,2],[5,2],[5,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[18,5],[21,2],[21,3],[23,4],[32,1],[32,0],[27,3],[27,1],[22,6],[22,8],[35,1],[35,0],[38,3],[38,1],[39,3],[37,1],[37,1],[37,1],[37,1],[37,1],[9,2],[9,4],[9,6],[9,4],[9,4],[9,6],[9,4],[9,2],[10,5],[10,7],[10,5],[10,7],[48,3],[48,2],[51,4],[51,3],[52,4],[52,4],[11,3],[11,3],[11,2],[11,2],[17,3],[17,2],[56,1],[12,5],[12,7],[12,7],[13,5],[14,7],[16,7],[62,2],[62,1],[63,4],[63,3],[63,3],[63,2],[15,9],[15,9],[15,7],[15,7],[15,7],[15,7],[24,5],[30,2],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[30,1],[85,3],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,2],[85,5],[85,5],[85,4],[85,4],[85,1],[85,1],[85,1],[85,5],[85,3],[97,4],[97,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    
break;
case 2:
 
        return $$[$0-1]; 
     
break;
case 3:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 4: case 36:

        this.$ = [$$[$0]];
    
break;
case 5: case 6:
  console.error('Error Sintactico: ' + $$[$0-1] + ' linea: ' + _$[$0-1].first_line + ' columna: ' + _$[$0-1].first_column+" se esperaba: " + yy.parser.hash.expected.join(",")); 
                  let e = new registrarError(_$[$0-1].first_line, _$[$0-1].first_column,$$[$0-1],yy.parser.hash.expected.join(","),2);
                  e.compile();
    
break;
case 7: case 8:

        this.$ = $$[$0-1];
    
break;
case 9:

        
        this.$ = $$[$0-1];
    
break;
case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 20: case 33: case 103: case 104: case 120:

        this.$ = $$[$0];
    
break;
case 17:

       // this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
       this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 18:

        //this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 19:
 
        this.$ = $$[$0];
    
break;
case 21:

        this.$ = new Call($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 22:

        this.$ = $$[$0-1];       
    
break;
case 23:

        
     //this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
       this.$ = new Print($$[$0-2],false,_$[$0-4].first_line,_$[$0-4].first_column);
        
    
break;
case 24:

        //this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new Return(null,_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 25:

         //this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
         this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 26:

       // this.$ = new Call($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column);
       this.$ = new AssignmentFunc($$[$0-3],$$[$0-1],null,_$[$0-3].first_line,_$[$0-3].first_column);
        
    
break;
case 27:

        this.$ =  $$[$0];
    
break;
case 28: case 34:

        this.$ = [];
    
break;
case 29:

        $$[$0-2].push($$[$0]);               
        this.$ = $$[$0-2];       
    
break;
case 30:

        this.$ = [$$[$0]];     
    
break;
case 31:

        this.$ = new FunctionSt(new Type(Types.VOID),$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
    
break;
case 32:

        //this.$ = new Function($$[$0-6],null, $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
         this.$ = new FunctionSt($$[$0-1],$$[$0-6],$$[$0-4],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
    
break;
case 35:

        this.$ = $$[$0-2];
        this.$.push($$[$0]);
    
break;
case 37:

        this.$ = new Param($$[$0-2],$$[$0]);
    
break;
case 38:

        this.$ = new Type(Types.INTEGER);
    
break;
case 39:

        this.$ = new Type(Types.BOOLEAN);
    
break;
case 40:

        this.$ = new Type(Types.STRING);
    
break;
case 41:

        this.$ = new Type(Types.NULL);
    
break;
case 42:

        this.$ = new Type(Types.VOID);
    
break;
case 43:

        //errror
    
break;
case 44: case 47: case 49: case 50:

        //error
    
break;
case 45:

       // this.$ = new Declaration($$[$0-4], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],2);
       this.$ = new Declaration($$[$0-2],[$$[$0-4]],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
    
break;
case 46:

       // this.$ = new Declaration($$[$0-2], null, _$[$0-3].first_line, _$[$0-3].first_column,$$[$0],2);
       this.$ = new Declaration($$[$0],[$$[$0-2]],null,_$[$0-3].first_line,_$[$0-3].first_column);
        
    
break;
case 48:

        //this.$ = new Declaration($$[$0-4], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],1);
       this.$ = new Declaration($$[$0-2],[$$[$0-4]],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
    
break;
case 51:

        //error
        
        
    
break;
case 52:

         $$[$0-3].dimension = $$[$0-2];
         this.$ = new DeclarationArray($$[$0-3], $$[$0-5],$$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
        
    
break;
case 53:

       
       // error
      ;
    
break;
case 54:

         
       this.$ = new DeclarationArray($$[$0-3], $$[$0-5],$$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 55:
     
        this.$ = $$[$0-2] + 1;
    
break;
case 56:

        this.$ = 1;
    
break;
case 57:

       // $$[$0-3].push($$[$0-1]);
       // this.$ = $$[$0-3];

        $$[$0-3] += "["+$$[$0-1]+"]";
        this.$ = $$[$0-3];
    
break;
case 58:

       // this.$ = [$$[$0-1]];

        this.$ = "["+$$[$0-1]+"]";
    
break;
case 59:
                
         this.$ = new AssignmentArray($$[$0-1],$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 60:
   
        $$[$0-3] = new AssignmentId($$[$0-3],null,_$[$0-3].first_line,_$[$0-3].first_column);
        this.$ = new AssignmentArray($$[$0-1],$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column);     
    
break;
case 61:
           
         //this.$ = new pruebaAsign($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
         this.$ = new AssignmentArreglo($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
         //this.$ = new Assignment($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 62:
   
        //this.$ = new Asignation($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column,1);
        $$[$0-2] = new AssignmentId($$[$0-2],null,_$[$0-2].first_line,_$[$0-2].first_column);
        this.$ = new Assignment($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 63:
       
        //this.$ = new Asignation($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column,2);
        $$[$0-1] = new AccessId($$[$0-1],null,_$[$0-1].first_line,_$[$0-1].first_column);
        this.$ = new PostIncrement($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 64:
 
        
        //this.$ = new Asignation($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column,3);
        $$[$0-1] = new AccessId($$[$0-1],null,_$[$0-1].first_line,_$[$0-1].first_column);
        this.$ = new PostDecrement($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 65:

        //this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
         this.$ = new InstrBody($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 66:

       // this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new InstrBody(new Array(),_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 67:

        //this.$ = new Statement($$[$0], _$[$0].first_line, _$[$0].first_column);
         this.$ = new InstrBody($$[$0],_$[$0].first_line,_$[$0].first_column);
    
break;
case 68:

        this.$ = new If($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 69: case 70:

        //this.$ = new If($$[$0-4], $$[$0-2], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
        this.$ = new If($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 71:

       // this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
       this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 72:

        // this.$ = new doWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
         this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column); 
    
break;
case 73:

       this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 74:

     $$[$0-1].push($$[$0]);
     this.$ = $$[$0-1];
  
break;
case 75:

    this.$ = [$$[$0]];
    
  
break;
case 76:

   this.$ = new Case($$[$0-2],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column,"case");


break;
case 77:

   this.$ = new Case($$[$0-1],null, _$[$0-2].first_line, _$[$0-2].first_column,"case");    
 

break;
case 78:

   this.$ = new Case(null,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column,"default");  
  

break;
case 79:

   this.$ = new Case(null,null, _$[$0-1].first_line, _$[$0-1].first_column,"default");    

break;
case 80:

    this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    

break;
case 81:

   this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
   

break;
case 82:

  // this.$ = new For2(null,$$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column,1);
   this.$ = "for "+"("+$$[$0-4]+" in "+$$[$0-2]+")"+$$[$0];

break;
case 83:

  // this.$ = new For2($$[$0-4],null, $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column,2);
   this.$ = "for "+"("+$$[$0-4]+" in "+$$[$0-2]+")"+$$[$0];

break;
case 84:

  // this.$ = new For2(null,$$[$0-4], $$[$0-2], $$[$0],  _$[$0-6].first_line, _$[$0-6].first_column,3);
   this.$ = "for "+"("+$$[$0-4]+" of "+$$[$0-2]+")"+$$[$0];

break;
case 85:

   //this.$ = new For2($$[$0-4],null, $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column,4);
   this.$ = "for "+"("+$$[$0-4]+" of "+$$[$0-2]+")"+$$[$0];

break;
case 86:

       // this.$ = new Condition($$[$0-4], $$[$0-2], $$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
        this.$ = new Ternario($$[$0-2],$$[$0],$$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
    
break;
case 87:

       // this.$ = new Arithmetic($$[$0], null, ArithmeticOption.NEGATIVE, _$[$0-1].first_line,_$[$0-1].first_column);
       this.$ = new Times($$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
    
break;
case 88:

       // this.$ = new Logic($$[$0], null, LogicOption.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
         this.$ = new Not($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
    
break;
case 89:

        //this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
          this.$ = new Plus($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 90:

        //this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column);
        this.$ = new Minus($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 91:
 
        //this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES, _$[$0-2].first_line,_$[$0-2].first_column);
        this.$ = new Times($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 92:

        //this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
        this.$ = new Div($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 93:

       // this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
        this.$ = new Mod($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 94:

        //this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POT, _$[$0-2].first_line,_$[$0-2].first_column);
        this.$ = new Pot($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 95:

       // this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column);
        this.$ = new Less(false,$$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 96:

        //this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
         this.$ = new Less(true,$$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 97:

        //this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER ,_$[$0-2].first_line, _$[$0-2].first_column);
         this.$ = new Greater(false,$$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 98:

        //this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
       this.$ = new Greater(true,$$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 99:

        //this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
        this.$ = new Equals($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 100:

       // this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
       this.$ = new NotEquals($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 101:

        //this.$ = new Logic($$[$0-2], $$[$0],LogicOption.AND ,_$[$0-2].first_line, _$[$0-2].first_column);
        this.$ = new And($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);  
    
break;
case 102:

        //this.$ = new Logic($$[$0-2], $$[$0],LogicOption.OR ,_$[$0-2].first_line, _$[$0-2].first_column);
        this.$ = new Or($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 105:
 
        //this.$ = $$[$0-1];
        this.$ = $$[$0-1];
    
break;
case 106:
 
        //this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
        this.$ = new PrimitiveL(Types.DOUBLE, $$[$0], _$[$0].first_line, _$[$0].first_column); 
    
break;
case 107:
 
        //this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
         this.$ = new PrimitiveL(Types.INTEGER, $$[$0], _$[$0].first_line, _$[$0].first_column); 
    
break;
case 108:

        //this.$ = new Literal($$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, 2);
        this.$ = new StringL(Types.STRING,$$[$0].replace(/\"/g,""),_$[$0].first_line,_$[$0].first_column);
    
break;
case 109:

       // this.$ = new Literal($$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, 2);
        this.$ = new StringL(Types.STRING,$$[$0].replace(/\'/g,""),_$[$0].first_line,_$[$0].first_column);
        this.$ = $$[$0];
    
break;
case 110:

        //this.$ = new Literal(true, _$[$0].first_line, _$[$0].first_column, 3);
        this.$ = new PrimitiveL(Types.BOOLEAN, true, _$[$0].first_line, _$[$0].first_column);
    
break;
case 111:

        //this.$ = new Literal(false, _$[$0].first_line, _$[$0].first_column, 3);
         this.$ = new PrimitiveL(Types.BOOLEAN, false, _$[$0].first_line, _$[$0].first_column); 
    
break;
case 112:

        this.$ = new PrimitiveL(Types.NULL,'-1',_$[$0].first_line,_$[$0].first_column);
    
break;
case 113:

        //this.$ = new Access($$[$0-1],null, _$[$0-1].first_line, _$[$0-1].first_column,2);
        this.$ = new  accesstr($$[$0-1],null,1,null,_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 114:

        //this.$ = new Access($$[$0-4],null, _$[$0-4].first_line, _$[$0-4].first_column,2);
        this.$ = new  accesstr($$[$0-4],null,2,$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 115:

        //this.$ = new Access($$[$0-4],null, _$[$0-4].first_line, _$[$0-4].first_column,2);
        this.$ = new  accesstr($$[$0-4],null,5,$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 116:

        //this.$ = new Access($$[$0-3],null, _$[$0-3].first_line, _$[$0-3].first_column,2);
        this.$ = new  accesstr($$[$0-3],null,3,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 117:

        //this.$ = new Access($$[$0-3],null, _$[$0-3].first_line, _$[$0-3].first_column,2);
        this.$ = new  accesstr($$[$0-3],null,4,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 118:

        //this.$ = new Access($$[$0],null, _$[$0].first_line, _$[$0].first_column,2);
        this.$ = new AccessId($$[$0],null,_$[$0].first_line,_$[$0].first_column);
    
break;
case 119:

        //this.$ = $$[$0];
        this.$ = $$[$0];
    
break;
case 121:
 
        this.$ = new NewArray($$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 122:

       this.$ = new ArrayExpr($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 123:

    this.$ = new AccessArray($$[$0-1],$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column,true);   
  
break;
case 124:

    $$[$0-3]= new AccessId($$[$0-3],null,_$[$0-3].first_line, _$[$0-3].first_column);  
    this.$ = new AccessArray($$[$0-1],$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column,true);
  
break;
}
},
table: [{2:$V0,3:1,4:[1,2],5:3,6:4,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:$V3,26:$V4,29:$V5,30:35,31:$V6,34:$V7,43:$V8,45:$V9,47:$Va,49:$Vb,52:24,55:$Vc,57:$Vd,59:$Ve,60:$Vf,61:$Vg,66:$Vh,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{1:[3]},{1:[2,1]},{2:$V0,4:[1,50],6:51,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:$V3,26:$V4,29:$V5,30:35,31:$V6,34:$V7,43:$V8,45:$V9,47:$Va,49:$Vb,52:24,55:$Vc,57:$Vd,59:$Ve,60:$Vf,61:$Vg,66:$Vh,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},o($Vr,[2,4]),{7:[1,52],8:[1,53]},{7:[1,54]},{7:[1,55]},{7:[1,56]},o($Vr,[2,10]),o($Vr,[2,11]),o($Vr,[2,12]),o($Vr,[2,13]),o($Vr,[2,14]),o($Vr,[2,15]),o($Vr,[2,16]),{7:[1,57]},{7:[1,58]},o($Vr,[2,19]),o($Vr,[2,20]),o($Vs,$Vt,{7:[1,59]}),o($Vs,$Vu,{7:[1,60]}),{31:[1,61]},{31:[1,62]},{46:[1,63],49:[1,64]},o($Vs,$Vv,{26:$Vw,46:$Vx,49:[1,69],53:$Vy,54:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE}),{26:[1,75]},{26:[1,76]},{17:77,55:$Vc},{26:[1,78]},{26:[1,79]},{2:$V0,5:80,6:4,8:[1,81],9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:$V3,26:$V4,29:$V5,30:35,31:$V6,34:$V7,43:$V8,45:$V9,47:$Va,49:$Vb,52:24,55:$Vc,57:$Vd,59:$Ve,60:$Vf,61:$Vg,66:$Vh,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{26:[1,82]},{7:[1,83],23:87,24:85,26:$V4,30:84,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{31:[1,88]},{69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},{23:87,24:85,26:$V4,30:104,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:105,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},o($VV,[2,104]),{23:87,24:85,26:$V4,30:106,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},o($VV,[2,106]),o($VV,[2,107]),o($VV,[2,108]),o($VV,[2,109]),o($VV,[2,110]),o($VV,[2,111]),o($VV,[2,112]),o($VV,[2,120],{49:[1,107]}),{99:[1,108]},{23:87,24:85,26:$V4,27:109,30:110,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{1:[2,2]},o($Vr,[2,3]),o($Vr,[2,5]),o($Vr,[2,6]),o($Vr,[2,7]),o($Vr,[2,8]),o($Vr,[2,9]),o($Vr,[2,17]),o($Vr,[2,18]),o($Vr,[2,21]),o($Vr,[2,22]),{7:$VW,36:[1,112],46:$VX},{7:$VY,36:[1,114],46:$VZ},{23:87,24:85,26:$V4,30:115,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:116,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:117,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},o($V_,[2,63]),o($V_,[2,64]),{23:87,24:85,26:$V4,27:119,28:[2,28],30:110,31:$VF,32:118,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:120,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},o($VV,[2,113]),{26:[1,121]},{26:[1,122]},{26:[1,123]},{26:[1,124]},{23:87,24:85,26:$V4,30:125,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:126,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{59:[1,127]},{9:129,11:128,31:[1,130],45:[1,131],47:[1,132],52:24},{23:87,24:85,26:$V4,30:133,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{2:$V0,6:51,8:[1,134],9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:$V3,26:$V4,29:$V5,30:35,31:$V6,34:$V7,43:$V8,45:$V9,47:$Va,49:$Vb,52:24,55:$Vc,57:$Vd,59:$Ve,60:$Vf,61:$Vg,66:$Vh,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},o($V$,[2,66]),{23:87,24:85,26:$V4,27:135,30:110,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},o($Vr,[2,24]),{7:[1,136],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},o($VV,$Vu),o($VV,$Vv,{26:$Vw,49:[1,137],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE}),o($VV,$Vt),{26:[1,138]},{23:87,24:85,26:$V4,30:139,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:140,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:141,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:142,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:143,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:144,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:145,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:146,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:147,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:148,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:149,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:150,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:151,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:152,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:153,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},o($VV,[2,87]),o($VV,[2,88]),{28:[1,154],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},{23:87,24:85,26:$V4,30:155,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{26:[1,156]},{33:$V01,50:[1,157]},o($V11,[2,30],{69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU}),{23:87,24:85,26:$V4,30:159,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{37:160,40:$V21,41:$V31,42:$V41,43:$V51,44:$V61},{23:87,24:85,26:$V4,30:166,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{37:167,40:$V21,41:$V31,42:$V41,43:$V51,44:$V61},o($V_,[2,61],{69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU}),{50:[1,168],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},o($V_,[2,62],{69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU}),{28:[1,169]},{28:[2,27],33:$V01},{50:[1,170],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},{23:87,24:85,26:$V4,30:171,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:172,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{28:[1,173]},{28:[1,174]},{28:[1,175],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},{28:[1,176],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},{26:[1,177]},{7:[1,178]},{7:[1,179],67:[1,180],68:[1,181]},{46:$Vx,49:$V71,53:$Vy,54:$Vz,67:[1,182],68:[1,183]},{31:[1,185]},{31:[1,186]},{28:[1,187],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},o($V$,[2,65]),{28:[1,188],33:$V01},o($Vr,[2,25]),{23:87,24:85,26:$V4,30:189,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{28:[2,34],31:$V81,35:190,38:191,39:192},{36:[1,194],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},o($V91,[2,89],{73:$VJ,74:$VK,75:$VL,76:$VM}),o($V91,[2,90],{73:$VJ,74:$VK,75:$VL,76:$VM}),o($Va1,[2,91],{75:$VL,76:$VM}),o($Va1,[2,92],{75:$VL,76:$VM}),o($VV,[2,93]),o($VV,[2,94]),o($Vb1,[2,95],{70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),o($Vb1,[2,96],{70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),o($Vb1,[2,97],{70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),o($Vb1,[2,98],{70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),o($Vc1,[2,99],{70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ}),o($Vc1,[2,100],{70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ}),o([7,28,33,36,50,67,68,69,83,84],[2,101],{70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS}),o([7,28,33,36,50,67,68,69,84],[2,102],{70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT}),o($VV,[2,105]),{50:[1,195],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},{23:87,24:85,26:$V4,30:196,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},o($VV,[2,122]),{23:87,24:85,26:$V4,30:197,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},o($Vd1,[2,44],{69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU}),{7:$Ve1,46:$Vf1,48:199,49:$Vg1},o($Vh1,[2,38]),o($Vh1,[2,39]),o($Vh1,[2,40]),o($Vh1,[2,41]),o($Vh1,[2,42]),o($Vd1,[2,47],{69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU}),{7:$Vi1,46:$Vj1,48:202,49:$Vg1},o($Vk1,[2,59]),o($VV,[2,26]),o([46,49,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84],$Vl1),{28:[1,203],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},{28:[1,204],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},o($VV,[2,116]),o($VV,[2,117]),{17:205,55:$Vc},{17:206,55:$Vc},{23:87,24:85,26:$V4,30:207,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:208,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{23:87,24:85,26:$V4,30:209,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{31:[1,210]},{31:[1,211]},{31:[1,212]},{31:[1,213]},{23:87,24:85,26:$V4,30:214,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},o($Vd1,$VW,{36:[1,215],46:$VX}),o($Vd1,$VY,{36:[1,216],46:$VZ}),{55:[1,217]},{7:[1,218]},{50:[1,219],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},{28:[1,220]},{28:[2,33],33:[1,221]},o($Vm1,[2,36]),{36:[1,222]},{23:87,24:85,26:$V4,30:223,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},o($Vn1,[2,123]),{28:[1,224],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},o($V11,[2,29],{69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU}),{23:87,24:85,26:$V4,30:225,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{7:[2,51],46:[1,226],49:$Vo1},{50:[1,228]},{23:87,24:85,26:$V4,30:229,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{7:[2,53],46:[1,230],49:$Vo1},o($VV,[2,114]),o($VV,[2,115]),o($Vr,[2,68],{58:[1,231]}),o($Vr,[2,71]),{28:[1,232],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},{7:[1,233],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},{7:[1,234],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},{28:[1,235]},{28:[1,236]},{28:[1,237]},{28:[1,238]},{50:[1,239],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},{37:240,40:$V21,41:$V31,42:$V41,43:$V51,44:$V61},{37:241,40:$V21,41:$V31,42:$V41,43:$V51,44:$V61},{62:242,63:243,64:$Vp1,65:$Vq1},o($Vr,[2,23]),o($Vn1,[2,124]),{17:246,36:[1,247],55:$Vc},{31:$V81,39:248},{37:249,40:$V21,41:$V31,42:$V41,43:$V51,44:$V61},o([7,28,33,36,50,67,68,69],[2,86],{70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU}),o($VV,[2,121]),o($Vd1,[2,45],{69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU}),{23:87,24:85,26:$V4,30:250,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{50:[1,251]},o($Vr1,[2,56]),o($Vd1,[2,48],{69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU}),{23:87,24:85,26:$V4,30:252,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{12:254,17:253,55:$Vc,57:$Vd},{7:[1,255]},{11:256,31:$Vs1,52:24},{11:258,31:$Vs1,52:24},{17:259,55:$Vc},{17:260,55:$Vc},{17:261,55:$Vc},{17:262,55:$Vc},o($Vk1,$Vl1),o($Vd1,$Ve1,{46:$Vf1}),o($Vd1,$Vi1,{46:$Vj1}),{8:[1,263],63:264,64:$Vp1,65:$Vq1},o($Vt1,[2,75]),{23:87,24:85,26:$V4,30:265,31:$VF,43:$V8,49:$Vb,70:$Vi,71:$Vj,85:38,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,97:47,98:$Vq},{36:[1,266]},o($Vr,[2,31]),{37:267,40:$V21,41:$V31,42:$V41,43:$V51,44:$V61},o($Vm1,[2,35]),o($Vm1,[2,37]),{7:[2,52],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},o($Vr1,[2,55]),{7:[2,54],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},o($Vr,[2,69]),o($Vr,[2,70]),o($Vr,[2,72]),{28:[1,268]},{46:$Vx,49:$V71,53:$Vy,54:$Vz},{28:[1,269]},o($Vr,[2,82]),o($Vr,[2,84]),o($Vr,[2,83]),o($Vr,[2,85]),o($Vr,[2,73]),o($Vt1,[2,74]),{36:[1,270],69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU},o($Vt1,[2,79],{6:4,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,22:19,23:20,24:21,52:24,30:35,85:38,97:47,56:271,5:272,2:$V0,19:$V1,20:$V2,25:$V3,26:$V4,29:$V5,31:$V6,34:$V7,43:$V8,45:$V9,47:$Va,49:$Vb,55:$Vc,57:$Vd,59:$Ve,60:$Vf,61:$Vg,66:$Vh,70:$Vi,71:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,98:$Vq}),{17:273,55:$Vc},{17:274,55:$Vc},{17:275,55:$Vc},o($Vt1,[2,77],{6:4,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,22:19,23:20,24:21,52:24,30:35,85:38,97:47,5:272,56:276,2:$V0,19:$V1,20:$V2,25:$V3,26:$V4,29:$V5,31:$V6,34:$V7,43:$V8,45:$V9,47:$Va,49:$Vb,55:$Vc,57:$Vd,59:$Ve,60:$Vf,61:$Vg,66:$Vh,70:$Vi,71:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,98:$Vq}),o($Vt1,[2,78]),o($Vt1,[2,67],{9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,22:19,23:20,24:21,52:24,30:35,85:38,97:47,6:51,2:$V0,19:$V1,20:$V2,25:$V3,26:$V4,29:$V5,31:$V6,34:$V7,43:$V8,45:$V9,47:$Va,49:$Vb,55:$Vc,57:$Vd,59:$Ve,60:$Vf,61:$Vg,66:$Vh,70:$Vi,71:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,98:$Vq}),o($Vr,[2,32]),o($Vr,[2,80]),o($Vr,[2,81]),o($Vt1,[2,76])],
defaultActions: {2:[2,1],50:[2,2]},
parseError: function parseError (str, hash) {
this.hash = hash;
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

     const {StringL} = require('../Compiler/Expression/Literal/StringL');
     const {PrimitiveL} = require('../Compiler/Expression/Literal/PrimitiveL');
     const {Declaration} = require('../Compiler/Instruction/Variables/Declaration');
     const {DeclarationArray} = require('../Compiler/Instruction/Variables/DeclarationArray');
     const {Assignment} = require('../Compiler/Instruction/Variables/Assignment');
     const {AssignmentArreglo} = require('../Compiler/Instruction/Variables/AssigmentArreglo');
     const {Call} = require('../Compiler/Instruction/Variables/Call');

     const {If} = require('../Compiler/Instruction/Control/If');
     const {DoWhile} = require('../Compiler/Instruction/Control/DoWhile');
     const {While} = require('../Compiler/Instruction/Control/While');
     const {InstrBody} = require('../Compiler/Instruction/Control/InstrBody');
     const {Print} = require('../Compiler/Instruction/Functions/Print');
     const {FunctionSt} = require('../Compiler/Instruction/Functions/FunctionSt');
     const {StructSt} = require('../Compiler/Instruction/Functions/StructSt');
     const {Case} = require('../Compiler/Instruction/Control/Case');
     const {Switch} = require('../Compiler/Instruction/Control/Switch');
     const {For} = require('../Compiler/Instruction/Control/For');



     const {Div} = require('../Compiler/Expression/Arithmetic/Div');
     const {Minus} = require('../Compiler/Expression/Arithmetic/Minus');
     const {Mod} = require('../Compiler/Expression/Arithmetic/Mod');
     const {Plus} = require('../Compiler/Expression/Arithmetic/Plus');
     const {Pot} = require('../Compiler/Expression/Arithmetic/Pot');
     const {Times} = require('../Compiler/Expression/Arithmetic/Times');
     const {Ternario} = require('../Compiler/Expression/Arithmetic/Ternario');

     const {Equals} = require('../Compiler/Expression/Relational/Equals');
     const {Greater} = require('../Compiler/Expression/Relational/Greater');
     const {Less} = require('../Compiler/Expression/Relational/Less');
     const {NotEquals} = require('../Compiler/Expression/Relational/NotEquals');

     const {And} = require('../Compiler/Expression/Logical/And');
     const {Not} = require('../Compiler/Expression/Logical/Not');
     const {Or} = require('../Compiler/Expression/Logical/Or');

     const {Types,Type} = require('../Compiler/Utils/Type');
     const {Param} = require('../Compiler/Utils/Param');

     const {AccessId} = require('../Compiler/Expression/Access/AccessId');
     const {AccessArray} = require('../Compiler/Expression/Access/AccessArray');
     const {ArrayExpr} = require('../Compiler/Expression/Access/ArrayExpr');
     const {NewArray} = require('../Compiler/Expression/Access/NewArray');
     const {accesstr} = require('../Compiler/Expression/Access/AccessString');
     const {AssignmentId} = require('../Compiler/Expression/Assignment/AssignmentId');
     const {AssignmentArray} = require('../Compiler/Expression/Assignment/AssignmentArray');
     const {AssignmentFunc} = require('../Compiler/Expression/Assignment/AssignmentFunc');

     const {PostIncrement} = require('../Compiler/Expression/IncDec/PostIncrement');
     const {PostDecrement} = require('../Compiler/Expression/IncDec/PostDecrement');

     const {Break} = require('../Compiler/Instruction/Transfer/Break');
     const {Continue} = require('../Compiler/Instruction/Transfer/Continue');
     const {Return} = require('../Compiler/Instruction/Transfer/Return');


	 var funciones = new Array();
     var nom = new Array();
     const {registrarError} = require('../Compiler/Instruction/Variables/registrarError');

     var bandera = 0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multilinea 
break;
case 3:return 86
break;
case 4:return 87
break;
case 5:return 88
break;
case 6:return 89
break;
case 7:return 'CADENAPARAM'
break;
case 8:return 42
break;
case 9:return 41
break;
case 10:return 40
break;
case 11:return 'TYPE'
break;
case 12:return 99
break;
case 13:return 45
break;
case 14:return 47
break;
case 15:return 90
break;
case 16:return 91
break;
case 17:return 57
break;
case 18:return 58
break;
case 19:return 61
break;
case 20:return 64
break;
case 21:return 65
break;
case 22:return 60
break;
case 23:return 59
break;
case 24:return 66
break;
case 25:return 19
break;
case 26:return 20
break;
case 27:return 29
break;
case 28:return 25
break;
case 29:return 'GRAPH'
break;
case 30:return 34
break;
case 31:return 44
break;
case 32:return 'PUSH'
break;
case 33:return 'POP'
break;
case 34:return 92
break;
case 35:return 93
break;
case 36:return 95
break;
case 37:return 96
break;
case 38:return 94
break;
case 39:return 98
break;
case 40:return 99
break;
case 41:return 43
break;
case 42:return 'ANY'
break;
case 43:return 67
break;
case 44:return 68
break;
case 45:return 53
break;
case 46:return 72
break;
case 47:return 54
break;
case 48:return 70
break;
case 49:return 74
break;
case 50:return 76
break;
case 51:return 73
break;
case 52:return 75
break;
case 53:return 69
break;
case 54:return 81
break;
case 55:return 80
break;
case 56:return 78
break;
case 57:return 82
break;
case 58:return 77
break;
case 59:return 79
break;
case 60:return 83
break;
case 61:return 84
break;
case 62:return 71
break;
case 63:return 26
break;
case 64:return 28
break;
case 65:return 55
break;
case 66:return 8
break;
case 67:return 49
break;
case 68:return 50
break;
case 69:return 7 
break;
case 70:return 36
break;
case 71:return 46
break;
case 72:return 33
break;
case 73:return 31;
break;
case 74:return 4
break;
case 75: 
                       console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                       let e = new registrarError(yy_.yylloc.first_line, yy_.yylloc.first_column,yy_.yytext,null,1);
                       e.compile();
                    
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(([0-9]+)\.([0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')))/,/^(?:((`[^`]*`)))/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:number\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:function\b)/,/^(?:void\b)/,/^(?:\.push\b)/,/^(?:\.pop\b)/,/^(?:\.length\b)/,/^(?:\.CharAt\b)/,/^(?:\.toLowerCase\b)/,/^(?:\.toUpperCase\b)/,/^(?:\.Concat\b)/,/^(?:new\b)/,/^(?:Array\b)/,/^(?:null\b)/,/^(?:any\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:%)/,/^(?:\?)/,/^(?:==)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GrammarP2;
exports.Parser = GrammarP2.Parser;
exports.parse = function () { return GrammarP2.parse.apply(GrammarP2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}